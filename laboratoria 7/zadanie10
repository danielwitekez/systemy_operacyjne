#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

void *threadFunction(void *arg) {
    printf("Wątek ID: %lu - Rozpoczęcie pracy\n", pthread_self());

    // Wyłączenie anulowania wątków
    pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL);
    printf("Wątek ID: %lu - Anulowanie wątku jest wyłączone\n", pthread_self());

    // Symulacja działania wątku
    for (int i = 0; i < 5; ++i) {
        printf("Wątek ID: %lu - Iteracja %d\n", pthread_self(), i);

        // Symulacja obciążenia
        sleep(1);

        // Sprawdzenie, czy wątek został anulowany
        pthread_testcancel();
    }

    // Włączenie anulowania wątków przed zakończeniem
    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
    printf("Wątek ID: %lu - Anulowanie wątku jest włączone\n", pthread_self());

    printf("Wątek ID: %lu - Zakończenie pracy\n", pthread_self());
    return NULL;
}

int main(void) {
    pthread_t thread;

    // Tworzenie wątku
    pthread_create(&thread, NULL, threadFunction, NULL);

    // Oczekiwanie na rozpoczęcie pracy wątku
    sleep(2);

    // Anulowanie wątku po 3 sekundach
    pthread_cancel(thread);

    // Oczekiwanie na zakończenie wątku
    pthread_join(thread, NULL);

    return 0;
}
