#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define STOP_ITERATION 10
#define PAUSE_TIME 5

void *threadFunction(void *arg) {
    printf("Wątek ID: %lu - Rozpoczęcie pracy\n", pthread_self());

    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
    printf("Wątek ID: %lu - Anulowanie wątku jest włączone\n", pthread_self());

    for (int i = 0; i < STOP_ITERATION; ++i) {
        printf("Wątek ID: %lu - Iteracja %d\n", pthread_self(), i);

        pthread_testcancel();

        if (i == STOP_ITERATION / 2) {
            printf("Wątek ID: %lu - Wyłączanie anulowania na chwilę...\n", pthread_self());
            pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL);
            printf("Wątek ID: %lu - Anulowanie wątku jest wyłączone\n", pthread_self());

            // Symulacja oczekiwania
            sleep(PAUSE_TIME);

            printf("Wątek ID: %lu - Wznawianie anulowania\n", pthread_self());
            pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
            printf("Wątek ID: %lu - Anulowanie wątku jest włączone\n", pthread_self());
        }

        sleep(1);
    }

    printf("Wątek ID: %lu - Zakończenie pracy\n", pthread_self());
    return NULL;
}

int main(void) {
    pthread_t thread;

    pthread_create(&thread, NULL, threadFunction, NULL);

    sleep(16);

    pthread_cancel(thread);

    pthread_join(thread, NULL);

    return 0;
}
