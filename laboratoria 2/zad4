#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

void createConcurrentProcesses(int numProcesses) {
    for (int i = 0; i < numProcesses; ++i) {
        pid_t pid = fork();

        if (pid == -1) {
            perror("fork");
        } else if (pid == 0) {
            // Proces potomny
            printf("Proces potomny: PID = %d, PPID = %d, Numer = %d\n", getpid(), getppid(), i + 1);
            sleep(i + 1);
            exit(0);
        }
    }

    // Proces macierzysty czeka na zakończenie wszystkich potomków
    int status;
    for (int i = 0; i < numProcesses; ++i) {
        wait(&status);
    }
    printf("Proces macierzysty: Wszystkie procesy potomne zakończone.\n");
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Podaj liczbę procesów potomnych do utworzenia.\n");
        exit(EXIT_FAILURE);
    }

    int numProcesses = atoi(argv[1]);
    if (numProcesses <= 0) {
        fprintf(stderr, "Liczba procesów potomnych musi być dodatnia.\n");
        exit(EXIT_FAILURE);
    }

    createConcurrentProcesses(numProcesses);

    return 0;
}
