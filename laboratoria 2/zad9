#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>

#define SHM_SIZE 1024

void shareData() {
    int shmid;
    char *shared_memory;

    shmid = shmget(IPC_PRIVATE, SHM_SIZE, IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    shared_memory = shmat(shmid, NULL, 0);
    if (shared_memory == (void *)-1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    sprintf(shared_memory, "Wspoldzielone dane!");

    pid_t pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Proces potomny
        printf("Proces potomny: %s\n", shared_memory);
        sprintf(shared_memory, "Dane zmodyfikowane przez proces potomny!");
        exit(EXIT_SUCCESS);
    } else {
        // Proces macierzysty
        wait(NULL);
        printf("Proces macierzysty: %s\n", shared_memory);

        if (shmdt(shared_memory) == -1) {
            perror("shmdt");
            exit(EXIT_FAILURE);
        }

        if (shmctl(shmid, IPC_RMID, NULL) == -1) {
            perror("shmctl");
            exit(EXIT_FAILURE);
        }
    }
}

int main(void) {
    shareData();

    return 0;
}
