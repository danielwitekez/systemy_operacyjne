#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/wait.h>
#include <unistd.h>

void P(int semid, int sem_num) {
    struct sembuf op;
    op.sem_num = sem_num;
    op.sem_op = -1;
    op.sem_flg = 0;
    semop(semid, &op, 1);
}

void V(int semid, int sem_num) {
    struct sembuf op;
    op.sem_num = sem_num;
    op.sem_op = 1;
    op.sem_flg = 0;
    semop(semid, &op, 1);
}

int main(void) {
    int shmid, semid;
    char *shmaddr;
    char message[] = "To jest obszar pamiÄ™ci dzielonej.";

    shmid = shmget(IPC_PRIVATE, sizeof(message), IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget");
        exit(1);
    }

    shmaddr = (char *)shmat(shmid, NULL, 0);
    if (shmaddr == (char *)-1) {
        perror("shmat");
        exit(1);
    }

    semid = semget(IPC_PRIVATE, 2, IPC_CREAT | 0666);
    if (semid < 0) {
        perror("semget");
        exit(1);
    }

    semctl(semid, 0, SETVAL, 1);
    semctl(semid, 1, SETVAL, 0);

    int process_id = fork();

    if (process_id < 0) {
        perror("fork");
        exit(1);
    } else if (process_id == 0) {
        P(semid, 0);
        strcpy(shmaddr, "Proces 1 zapisuje dane.");
        V(semid, 1);
        exit(0);
    } else {
        int process_id2 = fork();
        if (process_id2 < 0) {
            perror("fork");
            exit(1);
        } else if (process_id2 == 0) {
            P(semid, 0);
            strcpy(shmaddr, "Proces 2 zapisuje dane.");
            V(semid, 1);
            exit(0);
        } else {
            for (int i = 0; i < 2; i++) {
                wait(NULL);
            }

            if (semctl(semid, 0, IPC_RMID) < 0) {
                perror("semctl");
            }

            if (shmdt(shmaddr) < 0) {
                perror("shmdt");
            }

            if (shmctl(shmid, IPC_RMID, NULL) < 0) {
                perror("shmctl");
            }
        }
    }

    return 0;
}
