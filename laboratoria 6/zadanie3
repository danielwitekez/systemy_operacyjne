#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/wait.h>
#include <unistd.h>
#include <fcntl.h>

void P(int semid, int sem_num) {
    struct sembuf op;
    op.sem_num = sem_num;
    op.sem_op = -1;
    op.sem_flg = 0;
    semop(semid, &op, 1);
}

void V(int semid, int sem_num) {
    struct sembuf op;
    op.sem_num = sem_num;
    op.sem_op = 1;
    op.sem_flg = 0;
    semop(semid, &op, 1);
}

int main(void) {
    int shmid, semid;
    char *shmaddr;
    int *sharedValue;

    int numReaders = 3;
    int numWriters = 2;

    shmid = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget");
        exit(1);
    }

    shmaddr = (char *)shmat(shmid, NULL, 0);
    if (shmaddr == (char *)-1) {
        perror("shmat");
        exit(1);
    }

    sharedValue = (int *)shmaddr;
    *sharedValue = 0;

    semid = semget(IPC_PRIVATE, 2, IPC_CREAT | 0666);
    if (semid < 0) {
        perror("semget");
        exit(1);
    }

    semctl(semid, 0, SETVAL, 1);
    semctl(semid, 1, SETVAL, 1);

    for (int i = 0; i < numReaders + numWriters; i++) {
        int process_id = fork();
        if (process_id < 0) {
            perror("fork");
            exit(1);
        } else if (process_id == 0) {
            if (i < numWriters) {
                P(semid, 0);
                (*sharedValue)++;
                char writerMsg[100];
                sprintf(writerMsg, "Pisarz %d: Zapisano wartość %d\n", i, *sharedValue);
                write(STDOUT_FILENO, writerMsg, strlen(writerMsg));
                V(semid, 0);
            } else {
                P(semid, 1);
                char readerMsg[100];
                sprintf(readerMsg, "Czytelnik %d: Odczytano wartość %d\n", i - numWriters, *sharedValue);
                write(STDOUT_FILENO, readerMsg, strlen(readerMsg));
                V(semid, 1);
            }
            exit(0);
        }
    }

    for (int i = 0; i < numReaders + numWriters; i++) {
        wait(NULL);
    }

    if (semctl(semid, 0, IPC_RMID) < 0) {
        perror("semctl");
    }

    if (shmdt(shmaddr) < 0) {
        perror("shmdt");
    }

    if (shmctl(shmid, IPC_RMID, NULL) < 0) {
        perror("shmctl");
    }
    
    return 0;
}
