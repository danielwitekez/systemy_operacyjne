#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>

#define PORT 12345

int main(void) {
    // Utworzenie gniazda serwera
    int server_socket = socket(AF_INET, SOCK_DGRAM, 0);
    if (server_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Konfiguracja adresu serwera
    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Przypisanie adresu do gniazda serwera
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("bind");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    // Odbiór pakietów i pomiar czasu
    char buffer[8192];  // Maksymalny rozmiar pakietu (do dostosowania)
    struct sockaddr_in client_addr;
    socklen_t client_addr_len = sizeof(client_addr);

    while (1) {
        // Odbiór pakietu od klienta
        ssize_t received_bytes = recvfrom(server_socket, buffer, sizeof(buffer), 0, (struct sockaddr *)&client_addr, &client_addr_len);
        if (received_bytes == -1) {
            perror("recvfrom");
            close(server_socket);
            exit(EXIT_FAILURE);
        }

        // Przetwarzanie odebranego pakietu (opcjonalne)
        // ...

        // Wysłanie potwierdzenia do klienta (opcjonalne)
        // ...

        // Wypisanie informacji o otrzymanym pakiecie
        printf("Received packet from %s:%d, size: %zd bytes\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), received_bytes);
    }

    // Zamknięcie gniazda serwera (ten fragment kodu nie zostanie osiągnięty)
    close(server_socket);

    return 0;
}
