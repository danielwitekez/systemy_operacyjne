#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>

#define PORT 12345

void process_received_packet(char *buffer, ssize_t received_bytes, struct sockaddr_in client_addr) {
    // Przetwarzanie odebranego pakietu (opcjonalne)
    // ...

    // Wypisanie informacji o otrzymanym pakiecie
    printf("Received packet from %s:%d, size: %zd bytes\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), received_bytes);

    // Odsyłanie potwierdzenia do klienta (opcjonalne)
    // ...
}

void receive_packets(int socket) {
    char buffer[8192];  // Maksymalny rozmiar pakietu (do dostosowania)
    struct sockaddr_in client_addr;
    socklen_t client_addr_len = sizeof(client_addr);

    while (1) {
        ssize_t received_bytes = recv(socket, buffer, sizeof(buffer), 0);
        if (received_bytes == -1) {
            perror("recv");
            close(socket);
            exit(EXIT_FAILURE);
        } else if (received_bytes == 0) {
            // Połączenie z klientem zakończone
            printf("Client disconnected\n");
            close(socket);
            exit(EXIT_SUCCESS);
        }

        process_received_packet(buffer, received_bytes, client_addr);
    }
}

int main(void) {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1)
