#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>

#define PORT 12345
#define MAX_USERS 10
#define MAX_MESSAGE_LEN 256

typedef struct {
    char username[50];
    int socket;
} User;

User users[MAX_USERS];
int num_users = 0;

void send_message(char *sender, char *receiver, char *message) {
    for (int i = 0; i < MAX_USERS; i++) {
        if (users[i].socket != -1 && strcmp(users[i].username, receiver) == 0) {
            // Znaleziono użytkownika odbiorcy
            char full_message[MAX_MESSAGE_LEN + 50];
            sprintf(full_message, "[%s]: %s", sender, message);

            // Wysłanie wiadomości do użytkownika odbiorcy
            if (send(users[i].socket, full_message, strlen(full_message), 0) == -1) {
                perror("send");
            }
            return;
        }
    }

    // Użytkownik odbiorcy nie znaleziony
    printf("User '%s' not found.\n", receiver);
}

void handle_client(int client_socket) {
    char username[50];
    char message[MAX_MESSAGE_LEN];

    // Odbiór nazwy użytkownika od klienta
    if (recv(client_socket, username, sizeof(username), 0) == -1) {
        perror("recv");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    // Dodanie użytkownika do listy
    if (num_users < MAX_USERS) {
        users[num_users].socket = client_socket;
        strcpy(users[num_users].username, username);
        num_users++;
        printf("User '%s' connected.\n", username);
    } else {
        printf("Server is full. User '%s' could not be registered.\n", username);
        close(client_socket);
        return;
    }

    // Obsługa komunikacji z klientem
    while (1) {
        // Odbiór wiadomości od klienta
        if (recv(client_socket, message, sizeof(message), 0) == -1) {
            perror("recv");
            close(client_socket);
            exit(EXIT_FAILURE);
        }

        // Sprawdzenie, czy wiadomość jest do użytkownika czy do wszystkich
        char *delimiter = strchr(message, ' ');
        if (delimiter != NULL) {
            *delimiter = '\0';
            send_message(username, message + 1, delimiter + 1);
        } else {
            // Wiadomość do wszystkich użytkowników
            for (int i = 0; i < MAX_USERS; i++) {
                if (users[i].socket != -1 && strcmp(users[i].username, username) != 0) {
                    // Wysłanie wiadomości do innych użytkowników
                    if (send(users[i].socket, message, strlen(message), 0) == -1) {
                        perror("send");
                    }
                }
            }
        }
    }
}

int main(void) {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("bind");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, 5) == -1) {
        perror("listen");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    for (int i = 0; i < MAX_USERS; i++) {
        users[i].socket = -1;
    }

    while (1) {
        struct sockaddr_in client_addr;
        socklen_t client_addr_len = sizeof(client_addr);

        int client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);
        if (client_socket == -1) {
            perror("accept");
            close(server_socket);
            exit(EXIT_FAILURE);
        }

        // Obsługa nowego klienta w osobnym wątku lub procesie (do zaimplementowania)
        handle_client(client_socket);
    }

    close(server_socket);

    return 0;
}
