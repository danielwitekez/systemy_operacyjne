#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <signal.h>
#include <errno.h>

#define PORT 12345
#define MAX_CONNECTIONS 5

void handle_client(int client_socket) {
    // Funkcja do obsługi połączenia z klientem
    // Możesz dostosować tę funkcję do własnych potrzeb
    // W tym przypadku odbiera i wyświetla pseudolosowe liczby
    int buffer[10];
    int received_bytes;

    while ((received_bytes = recv(client_socket, buffer, sizeof(buffer), 0)) > 0) {
        // Przetwarzanie odebranych danych (np. wyświetlanie)
        printf("Received from client: ");
        for (int i = 0; i < received_bytes / sizeof(int); i++) {
            printf("%d ", buffer[i]);
        }
        printf("\n");
    }

    if (received_bytes == 0) {
        // Połączenie z klientem zakończone
        printf("Client disconnected\n");
    } else {
        perror("recv");
    }

    close(client_socket);
}

void handle_sigchild(int signo) {
    // Obsługa sygnału SIGCHLD (ignorowanie, aby uniknąć tworzenia procesów zombie)
    (void)signo;  // Uniknięcie ostrzeżenia o nieużywanej zmiennej
    while (waitpid(-1, NULL, WNOHANG) > 0);
}

int main(void) {
    // Ustawienie obsługi sygnału SIGCHLD
    signal(SIGCHLD, handle_sigchild);

    // Utworzenie gniazda serwera
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Konfiguracja adresu serwera
    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Przypisanie adresu do gniazda serwera
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("bind");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    // Nasłuchiwanie na połączenia
    if (listen(server_socket, MAX_CONNECTIONS) == -1) {
        perror("listen");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    while (1) {
        // Akceptowanie połączenia od klienta
        struct sockaddr_in client_addr;
        socklen_t client_addr_len = sizeof(client_addr);
        int client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);
        if (client_socket == -1) {
            if (errno == EINTR) {
                // Obsługa przerwania przez sygnał
                continue;
            } else {
                perror("accept");
                close(server_socket);
                exit(EXIT_FAILURE);
            }
        }

        // Utworzenie procesu potomnego do obsługi połączenia z klientem
        pid_t pid = fork();
        if (pid == -1) {
            perror("fork");
            close(server_socket);
            close(client_socket);
            exit(EXIT_FAILURE);
        }

        if (pid == 0) {
            // Proces potomny obsługuje połączenie
            close(server_socket);
            handle_client(client_socket);
            exit(EXIT_SUCCESS);
        } else {
            // Proces macierzysty zamyka gniazdo klienta i kontynuuje nasłuchiwanie
            close(client_socket);
        }
    }

    // Zamknięcie gniazda serwera (ten fragment kodu nie zostanie osiągnięty)
    close(server_socket);

    return 0;
}
