#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <pthread.h>
#include <string.h>

#define PORT 12345
#define THREAD_POOL_SIZE 5

// Struktura przechowująca dane dla wątków obsługujących połączenia
typedef struct {
    int client_socket;
} ThreadData;

// Funkcja wątku obsługująca połączenie
void *handle_connection(void *arg) {
    ThreadData *thread_data = (ThreadData *)arg;
    int client_socket = thread_data->client_socket;
    free(thread_data);

    // Przetwarzanie danych odebranych od klienta
    char buffer[1024];
    ssize_t received_bytes;

    while ((received_bytes = recv(client_socket, buffer, sizeof(buffer), 0)) > 0) {
        // Obsługa komunikatu tekstowego
        buffer[received_bytes] = '\0';  // Dodanie znaku końca stringa
        printf("Received message: %s", buffer);
    }

    if (received_bytes == 0) {
        // Połączenie z klientem zakończone
        printf("Client disconnected\n");
    } else {
        perror("recv");
    }

    close(client_socket);
    pthread_exit(NULL);
}

int main(void) {
    // Utworzenie gniazda serwera
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Konfiguracja adresu serwera
    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Przypisanie adresu do gniazda serwera
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("bind");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    // Nasłuchiwanie na połączenia
    if (listen(server_socket, THREAD_POOL_SIZE) == -1) {
        perror("listen");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    // Inicjalizacja puli wątków
    pthread_t thread_pool[THREAD_POOL_SIZE];
    pthread_attr_t attr;
    pthread_attr_init(&attr);

    while (1) {
        // Akceptowanie połączenia od klienta
        struct sockaddr_in client_addr;
        socklen_t client_addr_len = sizeof(client_addr);
        int client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);
        if (client_socket == -1) {
            perror("accept");
            close(server_socket);
            exit(EXIT_FAILURE);
        }

        printf("New connection accepted\n");

        // Tworzenie nowego wątku do obsługi połączenia
        ThreadData *thread_data = malloc(sizeof(ThreadData));
        thread_data->client_socket = client_socket;

        int i;
        for (i = 0; i < THREAD_POOL_SIZE; i++) {
            if (pthread_tryjoin_np(thread_pool[i], NULL) == 0) {
                pthread_create(&thread_pool[i], &attr, handle_connection, (void *)thread_data);
                break;
            }
        }

        if (i == THREAD_POOL_SIZE) {
            // Brak dostępnych wątków, obsługa połączenia w głównym wątku
            handle_connection((void *)thread_data);
        }
    }

    // Zamknięcie gniazda serwera (ten fragment kodu nie zostanie osiągnięty)
    close(server_socket);

    return 0;
}
